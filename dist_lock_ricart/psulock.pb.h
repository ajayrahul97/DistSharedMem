// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: psulock.proto

#ifndef PROTOBUF_INCLUDED_psulock_2eproto
#define PROTOBUF_INCLUDED_psulock_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_psulock_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_psulock_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_psulock_2eproto();
namespace psulock {
class LockMessage;
class LockMessageDefaultTypeInternal;
extern LockMessageDefaultTypeInternal _LockMessage_default_instance_;
class LockReply;
class LockReplyDefaultTypeInternal;
extern LockReplyDefaultTypeInternal _LockReply_default_instance_;
}  // namespace psulock
namespace google {
namespace protobuf {
template<> ::psulock::LockMessage* Arena::CreateMaybeMessage<::psulock::LockMessage>(Arena*);
template<> ::psulock::LockReply* Arena::CreateMaybeMessage<::psulock::LockReply>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace psulock {

// ===================================================================

class LockMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:psulock.LockMessage) */ {
 public:
  LockMessage();
  virtual ~LockMessage();

  LockMessage(const LockMessage& from);

  inline LockMessage& operator=(const LockMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LockMessage(LockMessage&& from) noexcept
    : LockMessage() {
    *this = ::std::move(from);
  }

  inline LockMessage& operator=(LockMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LockMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockMessage* internal_default_instance() {
    return reinterpret_cast<const LockMessage*>(
               &_LockMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LockMessage* other);
  friend void swap(LockMessage& a, LockMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LockMessage* New() const final {
    return CreateMaybeMessage<LockMessage>(nullptr);
  }

  LockMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LockMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LockMessage& from);
  void MergeFrom(const LockMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 message_type = 1;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 1;
  ::google::protobuf::int32 message_type() const;
  void set_message_type(::google::protobuf::int32 value);

  // int32 mySeqNo = 2;
  void clear_myseqno();
  static const int kMySeqNoFieldNumber = 2;
  ::google::protobuf::int32 myseqno() const;
  void set_myseqno(::google::protobuf::int32 value);

  // int32 nodeId = 3;
  void clear_nodeid();
  static const int kNodeIdFieldNumber = 3;
  ::google::protobuf::int32 nodeid() const;
  void set_nodeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:psulock.LockMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 message_type_;
  ::google::protobuf::int32 myseqno_;
  ::google::protobuf::int32 nodeid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_psulock_2eproto;
};
// -------------------------------------------------------------------

class LockReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:psulock.LockReply) */ {
 public:
  LockReply();
  virtual ~LockReply();

  LockReply(const LockReply& from);

  inline LockReply& operator=(const LockReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LockReply(LockReply&& from) noexcept
    : LockReply() {
    *this = ::std::move(from);
  }

  inline LockReply& operator=(LockReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LockReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockReply* internal_default_instance() {
    return reinterpret_cast<const LockReply*>(
               &_LockReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LockReply* other);
  friend void swap(LockReply& a, LockReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LockReply* New() const final {
    return CreateMaybeMessage<LockReply>(nullptr);
  }

  LockReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LockReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LockReply& from);
  void MergeFrom(const LockReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:psulock.LockReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_psulock_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LockMessage

// int32 message_type = 1;
inline void LockMessage::clear_message_type() {
  message_type_ = 0;
}
inline ::google::protobuf::int32 LockMessage::message_type() const {
  // @@protoc_insertion_point(field_get:psulock.LockMessage.message_type)
  return message_type_;
}
inline void LockMessage::set_message_type(::google::protobuf::int32 value) {
  
  message_type_ = value;
  // @@protoc_insertion_point(field_set:psulock.LockMessage.message_type)
}

// int32 mySeqNo = 2;
inline void LockMessage::clear_myseqno() {
  myseqno_ = 0;
}
inline ::google::protobuf::int32 LockMessage::myseqno() const {
  // @@protoc_insertion_point(field_get:psulock.LockMessage.mySeqNo)
  return myseqno_;
}
inline void LockMessage::set_myseqno(::google::protobuf::int32 value) {
  
  myseqno_ = value;
  // @@protoc_insertion_point(field_set:psulock.LockMessage.mySeqNo)
}

// int32 nodeId = 3;
inline void LockMessage::clear_nodeid() {
  nodeid_ = 0;
}
inline ::google::protobuf::int32 LockMessage::nodeid() const {
  // @@protoc_insertion_point(field_get:psulock.LockMessage.nodeId)
  return nodeid_;
}
inline void LockMessage::set_nodeid(::google::protobuf::int32 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:psulock.LockMessage.nodeId)
}

// -------------------------------------------------------------------

// LockReply

// int32 result = 1;
inline void LockReply::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 LockReply::result() const {
  // @@protoc_insertion_point(field_get:psulock.LockReply.result)
  return result_;
}
inline void LockReply::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:psulock.LockReply.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace psulock

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_psulock_2eproto
