// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: psudsm.proto
#ifndef GRPC_psudsm_2eproto__INCLUDED
#define GRPC_psudsm_2eproto__INCLUDED

#include "psudsm.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace psudsm {

// Defines the service
class PollCheck final {
 public:
  static constexpr char const* service_full_name() {
    return "psudsm.PollCheck";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Function invoked to send the request
    virtual ::grpc::Status sendRequest(::grpc::ClientContext* context, const ::psudsm::PollMessage& request, ::psudsm::PollReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::PollReply>> AsyncsendRequest(::grpc::ClientContext* context, const ::psudsm::PollMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::PollReply>>(AsyncsendRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::PollReply>> PrepareAsyncsendRequest(::grpc::ClientContext* context, const ::psudsm::PollMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::PollReply>>(PrepareAsyncsendRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status sendReadRequest(::grpc::ClientContext* context, const ::psudsm::PageRead& request, ::psudsm::PageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::PageReply>> AsyncsendReadRequest(::grpc::ClientContext* context, const ::psudsm::PageRead& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::PageReply>>(AsyncsendReadRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::PageReply>> PrepareAsyncsendReadRequest(::grpc::ClientContext* context, const ::psudsm::PageRead& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::PageReply>>(PrepareAsyncsendReadRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status sendPageRequest(::grpc::ClientContext* context, const ::psudsm::PageRequest& request, ::psudsm::PageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::PageReply>> AsyncsendPageRequest(::grpc::ClientContext* context, const ::psudsm::PageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::PageReply>>(AsyncsendPageRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::PageReply>> PrepareAsyncsendPageRequest(::grpc::ClientContext* context, const ::psudsm::PageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::PageReply>>(PrepareAsyncsendPageRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status sendLockRequest(::grpc::ClientContext* context, const ::psudsm::LockMessage& request, ::psudsm::LockReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::LockReply>> AsyncsendLockRequest(::grpc::ClientContext* context, const ::psudsm::LockMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::LockReply>>(AsyncsendLockRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::LockReply>> PrepareAsyncsendLockRequest(::grpc::ClientContext* context, const ::psudsm::LockMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::LockReply>>(PrepareAsyncsendLockRequestRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Function invoked to send the request
      virtual void sendRequest(::grpc::ClientContext* context, const ::psudsm::PollMessage* request, ::psudsm::PollReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::psudsm::PollReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendReadRequest(::grpc::ClientContext* context, const ::psudsm::PageRead* request, ::psudsm::PageReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendReadRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::psudsm::PageReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendPageRequest(::grpc::ClientContext* context, const ::psudsm::PageRequest* request, ::psudsm::PageReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendPageRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::psudsm::PageReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendLockRequest(::grpc::ClientContext* context, const ::psudsm::LockMessage* request, ::psudsm::LockReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendLockRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::psudsm::LockReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::PollReply>* AsyncsendRequestRaw(::grpc::ClientContext* context, const ::psudsm::PollMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::PollReply>* PrepareAsyncsendRequestRaw(::grpc::ClientContext* context, const ::psudsm::PollMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::PageReply>* AsyncsendReadRequestRaw(::grpc::ClientContext* context, const ::psudsm::PageRead& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::PageReply>* PrepareAsyncsendReadRequestRaw(::grpc::ClientContext* context, const ::psudsm::PageRead& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::PageReply>* AsyncsendPageRequestRaw(::grpc::ClientContext* context, const ::psudsm::PageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::PageReply>* PrepareAsyncsendPageRequestRaw(::grpc::ClientContext* context, const ::psudsm::PageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::LockReply>* AsyncsendLockRequestRaw(::grpc::ClientContext* context, const ::psudsm::LockMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::psudsm::LockReply>* PrepareAsyncsendLockRequestRaw(::grpc::ClientContext* context, const ::psudsm::LockMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status sendRequest(::grpc::ClientContext* context, const ::psudsm::PollMessage& request, ::psudsm::PollReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::psudsm::PollReply>> AsyncsendRequest(::grpc::ClientContext* context, const ::psudsm::PollMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::psudsm::PollReply>>(AsyncsendRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::psudsm::PollReply>> PrepareAsyncsendRequest(::grpc::ClientContext* context, const ::psudsm::PollMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::psudsm::PollReply>>(PrepareAsyncsendRequestRaw(context, request, cq));
    }
    ::grpc::Status sendReadRequest(::grpc::ClientContext* context, const ::psudsm::PageRead& request, ::psudsm::PageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::psudsm::PageReply>> AsyncsendReadRequest(::grpc::ClientContext* context, const ::psudsm::PageRead& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::psudsm::PageReply>>(AsyncsendReadRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::psudsm::PageReply>> PrepareAsyncsendReadRequest(::grpc::ClientContext* context, const ::psudsm::PageRead& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::psudsm::PageReply>>(PrepareAsyncsendReadRequestRaw(context, request, cq));
    }
    ::grpc::Status sendPageRequest(::grpc::ClientContext* context, const ::psudsm::PageRequest& request, ::psudsm::PageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::psudsm::PageReply>> AsyncsendPageRequest(::grpc::ClientContext* context, const ::psudsm::PageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::psudsm::PageReply>>(AsyncsendPageRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::psudsm::PageReply>> PrepareAsyncsendPageRequest(::grpc::ClientContext* context, const ::psudsm::PageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::psudsm::PageReply>>(PrepareAsyncsendPageRequestRaw(context, request, cq));
    }
    ::grpc::Status sendLockRequest(::grpc::ClientContext* context, const ::psudsm::LockMessage& request, ::psudsm::LockReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::psudsm::LockReply>> AsyncsendLockRequest(::grpc::ClientContext* context, const ::psudsm::LockMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::psudsm::LockReply>>(AsyncsendLockRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::psudsm::LockReply>> PrepareAsyncsendLockRequest(::grpc::ClientContext* context, const ::psudsm::LockMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::psudsm::LockReply>>(PrepareAsyncsendLockRequestRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void sendRequest(::grpc::ClientContext* context, const ::psudsm::PollMessage* request, ::psudsm::PollReply* response, std::function<void(::grpc::Status)>) override;
      void sendRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::psudsm::PollReply* response, std::function<void(::grpc::Status)>) override;
      void sendReadRequest(::grpc::ClientContext* context, const ::psudsm::PageRead* request, ::psudsm::PageReply* response, std::function<void(::grpc::Status)>) override;
      void sendReadRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::psudsm::PageReply* response, std::function<void(::grpc::Status)>) override;
      void sendPageRequest(::grpc::ClientContext* context, const ::psudsm::PageRequest* request, ::psudsm::PageReply* response, std::function<void(::grpc::Status)>) override;
      void sendPageRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::psudsm::PageReply* response, std::function<void(::grpc::Status)>) override;
      void sendLockRequest(::grpc::ClientContext* context, const ::psudsm::LockMessage* request, ::psudsm::LockReply* response, std::function<void(::grpc::Status)>) override;
      void sendLockRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::psudsm::LockReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::psudsm::PollReply>* AsyncsendRequestRaw(::grpc::ClientContext* context, const ::psudsm::PollMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::psudsm::PollReply>* PrepareAsyncsendRequestRaw(::grpc::ClientContext* context, const ::psudsm::PollMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::psudsm::PageReply>* AsyncsendReadRequestRaw(::grpc::ClientContext* context, const ::psudsm::PageRead& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::psudsm::PageReply>* PrepareAsyncsendReadRequestRaw(::grpc::ClientContext* context, const ::psudsm::PageRead& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::psudsm::PageReply>* AsyncsendPageRequestRaw(::grpc::ClientContext* context, const ::psudsm::PageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::psudsm::PageReply>* PrepareAsyncsendPageRequestRaw(::grpc::ClientContext* context, const ::psudsm::PageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::psudsm::LockReply>* AsyncsendLockRequestRaw(::grpc::ClientContext* context, const ::psudsm::LockMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::psudsm::LockReply>* PrepareAsyncsendLockRequestRaw(::grpc::ClientContext* context, const ::psudsm::LockMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_sendRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_sendReadRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_sendPageRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_sendLockRequest_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Function invoked to send the request
    virtual ::grpc::Status sendRequest(::grpc::ServerContext* context, const ::psudsm::PollMessage* request, ::psudsm::PollReply* response);
    virtual ::grpc::Status sendReadRequest(::grpc::ServerContext* context, const ::psudsm::PageRead* request, ::psudsm::PageReply* response);
    virtual ::grpc::Status sendPageRequest(::grpc::ServerContext* context, const ::psudsm::PageRequest* request, ::psudsm::PageReply* response);
    virtual ::grpc::Status sendLockRequest(::grpc::ServerContext* context, const ::psudsm::LockMessage* request, ::psudsm::LockReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_sendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_sendRequest() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_sendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequest(::grpc::ServerContext* context, const ::psudsm::PollMessage* request, ::psudsm::PollReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendRequest(::grpc::ServerContext* context, ::psudsm::PollMessage* request, ::grpc::ServerAsyncResponseWriter< ::psudsm::PollReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendReadRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_sendReadRequest() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_sendReadRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendReadRequest(::grpc::ServerContext* context, const ::psudsm::PageRead* request, ::psudsm::PageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendReadRequest(::grpc::ServerContext* context, ::psudsm::PageRead* request, ::grpc::ServerAsyncResponseWriter< ::psudsm::PageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendPageRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_sendPageRequest() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_sendPageRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendPageRequest(::grpc::ServerContext* context, const ::psudsm::PageRequest* request, ::psudsm::PageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendPageRequest(::grpc::ServerContext* context, ::psudsm::PageRequest* request, ::grpc::ServerAsyncResponseWriter< ::psudsm::PageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendLockRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_sendLockRequest() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_sendLockRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendLockRequest(::grpc::ServerContext* context, const ::psudsm::LockMessage* request, ::psudsm::LockReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendLockRequest(::grpc::ServerContext* context, ::psudsm::LockMessage* request, ::grpc::ServerAsyncResponseWriter< ::psudsm::LockReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_sendRequest<WithAsyncMethod_sendReadRequest<WithAsyncMethod_sendPageRequest<WithAsyncMethod_sendLockRequest<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_sendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_sendRequest() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::psudsm::PollMessage, ::psudsm::PollReply>(
          [this](::grpc::ServerContext* context,
                 const ::psudsm::PollMessage* request,
                 ::psudsm::PollReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->sendRequest(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_sendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequest(::grpc::ServerContext* context, const ::psudsm::PollMessage* request, ::psudsm::PollReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendRequest(::grpc::ServerContext* context, const ::psudsm::PollMessage* request, ::psudsm::PollReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_sendReadRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_sendReadRequest() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::psudsm::PageRead, ::psudsm::PageReply>(
          [this](::grpc::ServerContext* context,
                 const ::psudsm::PageRead* request,
                 ::psudsm::PageReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->sendReadRequest(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_sendReadRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendReadRequest(::grpc::ServerContext* context, const ::psudsm::PageRead* request, ::psudsm::PageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendReadRequest(::grpc::ServerContext* context, const ::psudsm::PageRead* request, ::psudsm::PageReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_sendPageRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_sendPageRequest() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::psudsm::PageRequest, ::psudsm::PageReply>(
          [this](::grpc::ServerContext* context,
                 const ::psudsm::PageRequest* request,
                 ::psudsm::PageReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->sendPageRequest(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_sendPageRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendPageRequest(::grpc::ServerContext* context, const ::psudsm::PageRequest* request, ::psudsm::PageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendPageRequest(::grpc::ServerContext* context, const ::psudsm::PageRequest* request, ::psudsm::PageReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_sendLockRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_sendLockRequest() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::psudsm::LockMessage, ::psudsm::LockReply>(
          [this](::grpc::ServerContext* context,
                 const ::psudsm::LockMessage* request,
                 ::psudsm::LockReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->sendLockRequest(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_sendLockRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendLockRequest(::grpc::ServerContext* context, const ::psudsm::LockMessage* request, ::psudsm::LockReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendLockRequest(::grpc::ServerContext* context, const ::psudsm::LockMessage* request, ::psudsm::LockReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_sendRequest<ExperimentalWithCallbackMethod_sendReadRequest<ExperimentalWithCallbackMethod_sendPageRequest<ExperimentalWithCallbackMethod_sendLockRequest<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_sendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_sendRequest() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_sendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequest(::grpc::ServerContext* context, const ::psudsm::PollMessage* request, ::psudsm::PollReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendReadRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_sendReadRequest() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_sendReadRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendReadRequest(::grpc::ServerContext* context, const ::psudsm::PageRead* request, ::psudsm::PageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendPageRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_sendPageRequest() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_sendPageRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendPageRequest(::grpc::ServerContext* context, const ::psudsm::PageRequest* request, ::psudsm::PageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendLockRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_sendLockRequest() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_sendLockRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendLockRequest(::grpc::ServerContext* context, const ::psudsm::LockMessage* request, ::psudsm::LockReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_sendRequest() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_sendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequest(::grpc::ServerContext* context, const ::psudsm::PollMessage* request, ::psudsm::PollReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendReadRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_sendReadRequest() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_sendReadRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendReadRequest(::grpc::ServerContext* context, const ::psudsm::PageRead* request, ::psudsm::PageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendReadRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendPageRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_sendPageRequest() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_sendPageRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendPageRequest(::grpc::ServerContext* context, const ::psudsm::PageRequest* request, ::psudsm::PageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendPageRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendLockRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_sendLockRequest() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_sendLockRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendLockRequest(::grpc::ServerContext* context, const ::psudsm::LockMessage* request, ::psudsm::LockReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendLockRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_sendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_sendRequest() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->sendRequest(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_sendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequest(::grpc::ServerContext* context, const ::psudsm::PollMessage* request, ::psudsm::PollReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendRequest(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_sendReadRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_sendReadRequest() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->sendReadRequest(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_sendReadRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendReadRequest(::grpc::ServerContext* context, const ::psudsm::PageRead* request, ::psudsm::PageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendReadRequest(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_sendPageRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_sendPageRequest() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->sendPageRequest(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_sendPageRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendPageRequest(::grpc::ServerContext* context, const ::psudsm::PageRequest* request, ::psudsm::PageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendPageRequest(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_sendLockRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_sendLockRequest() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->sendLockRequest(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_sendLockRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendLockRequest(::grpc::ServerContext* context, const ::psudsm::LockMessage* request, ::psudsm::LockReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendLockRequest(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_sendRequest() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::psudsm::PollMessage, ::psudsm::PollReply>(std::bind(&WithStreamedUnaryMethod_sendRequest<BaseClass>::StreamedsendRequest, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_sendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendRequest(::grpc::ServerContext* context, const ::psudsm::PollMessage* request, ::psudsm::PollReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::psudsm::PollMessage,::psudsm::PollReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendReadRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_sendReadRequest() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::psudsm::PageRead, ::psudsm::PageReply>(std::bind(&WithStreamedUnaryMethod_sendReadRequest<BaseClass>::StreamedsendReadRequest, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_sendReadRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendReadRequest(::grpc::ServerContext* context, const ::psudsm::PageRead* request, ::psudsm::PageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendReadRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::psudsm::PageRead,::psudsm::PageReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendPageRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_sendPageRequest() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::psudsm::PageRequest, ::psudsm::PageReply>(std::bind(&WithStreamedUnaryMethod_sendPageRequest<BaseClass>::StreamedsendPageRequest, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_sendPageRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendPageRequest(::grpc::ServerContext* context, const ::psudsm::PageRequest* request, ::psudsm::PageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendPageRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::psudsm::PageRequest,::psudsm::PageReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendLockRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_sendLockRequest() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::psudsm::LockMessage, ::psudsm::LockReply>(std::bind(&WithStreamedUnaryMethod_sendLockRequest<BaseClass>::StreamedsendLockRequest, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_sendLockRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendLockRequest(::grpc::ServerContext* context, const ::psudsm::LockMessage* request, ::psudsm::LockReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendLockRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::psudsm::LockMessage,::psudsm::LockReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_sendRequest<WithStreamedUnaryMethod_sendReadRequest<WithStreamedUnaryMethod_sendPageRequest<WithStreamedUnaryMethod_sendLockRequest<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_sendRequest<WithStreamedUnaryMethod_sendReadRequest<WithStreamedUnaryMethod_sendPageRequest<WithStreamedUnaryMethod_sendLockRequest<Service > > > > StreamedService;
};

}  // namespace psudsm


#endif  // GRPC_psudsm_2eproto__INCLUDED
